#!/usr/bin/env bash
# Summary: Install a version of Go.
#
# Usage: goenv install <version>
#
# Versions should be in the form of N.N.N

# Bomb out if we hit an error, ever
set -e

# Verbose output in debug mode
[ -n "$GOENV_DEBUG" ] && {
  set -x
}

# Pull the desired version out of ARGV
version="$1"
version_dir="$GOENV_ROOT/versions/$version"

# stash the pwd
OLDPWD=$(pwd)

# Make the version dir and get in there
mkdir -p "$version_dir"
cd "$version_dir"

platform="$(uname -s | tr '[:upper:]' '[:lower:]')"

if [ "$(uname -m)" = "x86_64" ]; then
  arch="amd64"
else
  if [ "$platform" = "darwin"]; then
    if [ "$version" = "1.5" -o "$version" \> "1.5" ]; then
      echo "goenv: package for i386 was no longer provided from go 1.5"
      exit 1
    fi
  fi
  arch="386"
fi

if [ "$platform" = "darwin" ]; then
  # Since go version 1.2, osx packages were subdivided into 10.6 and 10.8
  # From go version 1.5, osx package for 10.6 was no longer released, so extra field is unnecessary
  if [ "$version" = "1.2" -o "$version" \> "1.2" -a "$version" \< "1.5" ]; then
    if [ "$(uname -r)" \> "12" ]; then
      extra="-osx10.8"
    else
      extra="-osx10.6"
    fi
  fi
fi

download="https://storage.googleapis.com/golang/go${version}.${arch}-${extra}.tar.gz"

# Can't get too clever here
set +e

# Download binary tarball and install
# Linux downloads are formatted differently from OS X
(
  curl -L -s -f "$download" > "/tmp/go${version}.${platform}-${arch}.tar.gz" && \
  tar zxvf "/tmp/go${version}.${platform}-${arch}.tar.gz" --strip-components 1 && \
  rm "/tmp/go${version}.${platform}-${arch}.tar.gz"
) || \
  {
    cd $OLDPWD
    rmdir "$version_dir"

    echo "goenv: unable to install Go \`${version}' from binary, download not available"
    exit 1
  }

echo "Installed ${version}"
cd $OLDPWD

exec "${GOENV_ROOT}/bin/goenv" rehash
